#!/usr/bin/perl

use strict; use warnings;
use Getopt::Long;
use Bio::EnsEMBL::Registry;
use Data::Dumper;
use Log::Log4perl qw(get_logger :levels);
use Ensembl;
use Synteny;
use Util;

$Data::Dumper::Maxdepth = 4;

my $METHOD_DEFAULT = "EPO";
my $GENOMES_DEFAULT = {'hsa'=>1,'mmu'=>1};
my $ROOT_DEFAULT = 'hsa';

my ($method,  # Alignment method (PECAN, EPO, BLASTZ_NET, etc)
    $genomes, # Genomes of interest
    $root,    # Which genome to use as a root
  );

################################################################################

sub processOptions {
  $method = $METHOD_DEFAULT;
  $genomes = $GENOMES_DEFAULT;
  $root = $ROOT_DEFAULT;

  my $genomeStr = undef;
  my $rc = GetOptions("method=s" => \$method,
                      "genomes=s" => \$genomeStr,
                      "root=s" => \$root);
  if (defined $genomeStr) {
    $genomes = {};
    my @flds = split ',', $genomeStr;
    foreach my $gen (@flds) {
      $genomes->{$gen} = 1;
    }
  }
}

sub getSliceAdaptor {
  my ($syn,$root) = @_;
  return $syn->{registry}->get_adaptor($Ensembl::genome->{$root},"core","Slice");
}

sub sortChroms {
  my $an = $a->seq_region_name;
  my $bn = $b->seq_region_name;
  if ($an =~ /^\d+$/) {
    if ($bn =~ /^\d+$/) {
      return $an <=> $bn;
    } else {
      return -1;
    }
  } elsif ($bn =~ /^\d+$/) {
    return 1;
  } else {
    return $an cmp $bn;
  }
}

################################################################################

&processOptions();
Util::log_init($DEBUG);

my $synteny = Synteny->new($root,$method,$genomes);

$synteny->loadMLSS() || die("failed to load MLSS");

my $genomeDB = $synteny->getGenomeDB($root);
my $slice_adaptor = &getSliceAdaptor($synteny,$root);

my $chroms = $slice_adaptor->fetch_all("chromosome");
my @chroms = sort sortChroms @$chroms;
foreach my $chrom (@chroms) {
  my $chromname = $chrom->seq_region_name;
  print "chr ",$chromname, "  len=", $chrom->seq_region_length, "\n";
  my $c = $synteny->countRegions($genomeDB,$chromname,1,$chrom->seq_region_length);
  print "block count: ",scalar $c,"\n";
#  foreach my $block (@$blocks) {
#    print "block:\n";
#    foreach my $tid (keys %$block) {
#      print $block->{$tid}->string,"\n";
#    }
#  }
  print "\n";
}

exit(0);
